/**
  * Copyright 2017 Interel
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
package core3.workflows

import akka.actor.ActorRef
import akka.pattern.ask
import akka.util.Timeout
import core3.security.UserTokenBase
import play.api.libs.json.JsValue

import scala.concurrent.{ExecutionContext, Future}

/**
  * A wrapper class for sending requests to [[core3.workflows.WorkflowEngineComponent]] actors.
  *
  * @param actor the actor to be used for all requests
  */
class WorkflowEngine(private val actor: ActorRef)(implicit ec: ExecutionContext, timeout: Timeout) {

  import WorkflowEngineComponent._

  /**
    * Retrieves the underlying [[akka.actor.ActorRef]].
    *
    * @return the actor ref
    */
  def getRef: ActorRef = actor

  /**
    * Executes the specified workflow with the supplied parameters.
    *
    * @param workflowName     the workflow to be executed
    * @param rawParams        the raw parameters supplied by the requesting service
    * @param user             the user associated with the request
    * @param returnOutputData set to true, if the output data generated by the workflow is to be returned with the result
    * @return the result of the operation
    */
  def executeWorkflow(workflowName: String, rawParams: JsValue, user: UserTokenBase, returnOutputData: Boolean = false): Future[WorkflowResult] = {
    (actor ? ExecuteWorkflow(workflowName, rawParams, user, returnOutputData)).mapTo[WorkflowResult]
  }
}
