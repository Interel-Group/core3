server.static {
  //core3.core.ComponentManagerActor
  manager {
    requestTimeout = 5 //in seconds
  }

  //core3.workflows.WorkflowEngineComponent
  engine {
    //Available options (not case sensitive):
    //- No transactions logged -> 'Never' or 'Off'
    //- All transactions logged -> 'Always' or 'RW'
    //- Only Read transcations logged -> 'OnReadOnly' or 'RO' or 'Read'
    //- Only Write transactions logged -> 'OnWriteOnly' or 'WO' or 'Write'
    storeLogs = "OnWriteOnly" // [Never (Off), OnReadOnly (RO, Read), OnWriteOnly (WO, Write), Always (RW)]
    requestTimeout = 5 //in seconds
  }

  database {
    requestTimeout = 5 //in seconds

    //core3.database.dals.slick.SlickDB
    slick { // or specific DB name, for example 'mariadb'
      url = "<jdbc URL>" // jdbc:<driver>://<some host>:<some port>/<some database name>
      username = "<some user>"
      password = "<some password>"
    }

    //core3.database.dals.memory.DistributedCache
    // Notes:
    // - A single node cluster can be created by assigning the same local and cluster ports.
    // - The first node to start up in a multi-node cluster must be configured to bind to itself (in the same way as
    //   a single-node cluster configuration).
    // - The initial message synchronization between cluster nodes is configured based on the specified [[syncInterval]]
    //   plus a random number (0-5) of seconds, to try to avoid multiple synchronizations happening at the same time.
    // - If [[preload]] is set to true, the actual preload will be started after a delay, based on [[actionTimeout]].
    // - The Akka config option 'akka.remote.netty.tcp.port' is always overridden by the parameter [[localPort]].
    // - The Akka config option 'akka.actor.provider' is always overridden by the parameter [[actorProvider]].
    // - TLS support for cluster communication is enabled via Netty config. Actual settings can be found in Akka's
    //   Remoting docs (http://doc.akka.io/docs/akka/current/scala/remoting.html).
    // - Message synchronization is performed by broadcasting a local node's last message ID. Should a remote node
    //   find that it is behind that (message IDs are sequential), a full cache reload is triggered
    distributed-cache {
      clusterHost = "<some host>"
      clusterPort = 0
      localPort = 0
      preload = true
      actionTimeout = 5 //in seconds
      containerTypeMaxCacheSize = 1000
      syncInterval = 5 //in seconds
      maxLoadAttempts = 5
      actorProvider = "akka.cluster.ClusterActorRefProvider"
    }

    //core3.database.dals.json.Solr
    solr {
      hostname = "localhost"
      port = 8983
      schema = "https"
      username = "<some user>"
      password = "<some password>"
      shardsCount = 1
      replicasCount = 1
      maxCommitTime = 3 //in seconds
    }

    //core3.database.dals.json.Redis
    redis {
      hostname = "localhost"
      port = 6379
      secret = "<some secret>"
      connectionTimeout = 5 //in seconds
      databaseID = 0
      scanCount = 100
    }

    //core3.database.dals.json.CouchDB
    couchdb {
      hostname = "localhost"
      port = 5984
      schema = "https"
      username = "<some user>"
      password = "<some password>"
      cacheOnly = false
    }

    //core3.database.dals.json.ElasticSearch
    // Notes:
    // - Even if ES is deployed as a multi-node cluster, connections should be created for the local node.
    // - If 'searchOnly' is set to false, full container data will be stored; great care must be taken when
    //   storing sensitive data.
    // - If 'coexist' is set to true and:
    //     - if 'searchOnly' is set to true, the 'clear' and 'build' operations will do nothing
    //     - if 'searchOnly' is set to false, the 'clear' and 'build' operations will work as normal
    // - If 'coexist' is set to false, the 'clear' and 'build' operations will work as normal, which will cause
    //   conflicts when a search and a store instance are used for the same container.
    // - Refresh policies:
    //     - NONE -> controlled by ES (default)
    //     - IMMEDIATE -> perform refresh immediately and wait for completion before getting response
    //     - WAIT_UNTIL -> wait until next refresh before getting response
    elastic {
      hostname = "localhost"
      port = 9300
      clusterName = "<some cluster name>"
      searchOnly = false
      coexist = false
      refreshPolicy = "NONE" // [NONE, IMMEDIATE, WAIT_UNTIL]
      scrollSize = 10000
      scrollExpiration = 60 //in seconds
    }
  }

  security {
    authentication {
      services {
        SOME_AUTH0_API_NAME {
          id = "<some API ID>"
          identifier = "<some identifier>"
          secret = "<some API secret>" //on Service/API application only!
          secretAlgo = "AES" //on Service/API application only!
          jwtAlgo = "HS256" //on Service/API application only!
          localUserTokenExpiration = 5 //on Service/API application only!
        }

        SOME_LOCALAUTH_SERVICE_NAME {
          uri = "https://localhost:12345/some_uri"
          serviceUser = "<some user>"
          serviceUserPassword = "<some password>"
        }
      }

      clients {
        SOME_AUTH0_CLIENT_NAME {
          clientSecret = "<some secret>"
          clientSecretAlgo = "AES"
          jwtAlgo = "HS256"
          domain = "<some domain>"
          callbackURI = "https://localhost:9000/some_callback"
          logoutReturnUIR = "https://localhost:9000/some_return_uri"
          clientId = "<some ID>"
          grantType = "authorization_code"
          backendClientID = "<some backend client ID>"
          backendGrantType = "urn:ietf:params:oauth:grant-type:jwt-bearer"
          localTokenExpiration = 15 //in minutes
          scope = "openid email"

          //Override credentials to be used for automatic user login meant for simplifying the development process.
          //Warning: Should only be used during development!
          override {
            username = "<some user>"
            password = "<some password>"
            connection = "<some connection>"
          }
        }

        //Can be used for configuring client & service controllers
        SOME_LOCAL_CLIENT_NAME {
          //Warning: Updating any of the following values will invalidate all existing user credentials!
          //These parameters need to be shared between all applications accessing the same authentication database.
          instanceSalt = "<some random salt>"
          passwordIterations = 15000
          keyLength = 128

          //The following values can be updated at any time and will not affect the stored user credentials
          placeholderPasswordSize = 96
          saltSize = 96
          sessionTokenSize = 130
          localTokenExpiration = 15 //in minutes


          //Override credentials to be used for automatic user login meant for simplifying the development process.
          //Warning: Should only be used during development and is ignored by service controllers!
          override {
            userID = "<some user ID>"
            password = "<some password>"
          }
        }
      }
    }
  }

  //core3.mail.Service
  // Notes:
  // - Always uses TLS.
  mail {
    hostname = "localhost"
    port = 25
    username = "<some user>"
    password = "<some password>"
  }
}